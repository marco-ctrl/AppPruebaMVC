// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AppPruebaMVC.Data.Models;

namespace AppPruebaMVC.Data.Context
{
    public partial class consultoriobdContext : DbContext
    {
        public consultoriobdContext()
        {
        }

        public consultoriobdContext(DbContextOptions<consultoriobdContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Citum> Cita { get; set; }
        public virtual DbSet<DetalleDiagnostico> DetalleDiagnosticos { get; set; }
        public virtual DbSet<Diagnostico> Diagnosticos { get; set; }
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<RecetaMedica> RecetaMedicas { get; set; }
        public virtual DbSet<Resultado> Resultados { get; set; }
        public virtual DbSet<TipoUsuario> TipoUsuarios { get; set; }
        public virtual DbSet<Triaje> Triajes { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Citum>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Cita");

                entity.ToTable("acitcon");

                entity.HasIndex(e => e.Paciente, "IXFK_Cita_aperson");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("pacaidcita");

                entity.Property(e => e.Estado).HasColumnName("cacaestcit");

                entity.Property(e => e.Fecha)
                    .HasColumnType("date")
                    .HasColumnName("cacafeccit");

                entity.Property(e => e.Hora)
                    .HasColumnType("time(5)")
                    .HasColumnName("cacahorcit");

                entity.Property(e => e.Paciente)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("facaidpers");

                entity.Property(e => e.Usuario)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("facaidusua");

                entity.HasOne(d => d.PacienteNavigation)
                    .WithMany(p => p.Cita)
                    .HasForeignKey(d => d.Paciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cita_aperson");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.Cita)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cita_Usuario");
            });

            modelBuilder.Entity<DetalleDiagnostico>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Detallediagnostico");

                entity.ToTable("adetdia");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("paddiddeta");

                entity.Property(e => e.Diagnostico)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("faddiddiag");

                entity.Property(e => e.Resultado)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("faddidresu");

                entity.Property(e => e.Tipo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caddtipopo");

                entity.HasOne(d => d.DiagnosticoNavigation)
                    .WithMany(p => p.DetalleDiagnosticos)
                    .HasForeignKey(d => d.Diagnostico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Detallediagnostico_Diagnostico");

                entity.HasOne(d => d.ResultadoNavigation)
                    .WithMany(p => p.DetalleDiagnosticos)
                    .HasForeignKey(d => d.Resultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Detallediagnostico_Resultado");
            });

            modelBuilder.Entity<Diagnostico>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Diagnostico");

                entity.ToTable("adiatico");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("padgiddiag");

                entity.Property(e => e.Enfermedad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cadgenferm");
            });

            modelBuilder.Entity<Persona>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Persona");

                entity.ToTable("aperson");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("papsidpers");

                entity.Property(e => e.Alergia)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsapemat");

                entity.Property(e => e.ApellidoPaterno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsapepat");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("capsdirper");

                entity.Property(e => e.EstadoCivil)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsestciv");

                entity.Property(e => e.FechaNacimiento)
                    .HasColumnType("date")
                    .HasColumnName("capsfecnac");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsnomper");

                entity.Property(e => e.NumeroCedula)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("capscedula");

                entity.Property(e => e.NumeroCelular)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("capscelula");

                entity.Property(e => e.NumeroTelefono)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("capstelefo");

                entity.Property(e => e.PersonaResponsable)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Personaresponsable");

                entity.Property(e => e.Sexo).HasColumnName("capssexoxo");
            });

            modelBuilder.Entity<RecetaMedica>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Recetamedica");

                entity.ToTable("arecmed");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("parmidrece");

                entity.Property(e => e.Cantidad)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("carmcantid");

                entity.Property(e => e.CodigoCita)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("farmidcita");

                entity.Property(e => e.Dosis)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("carmdosiss");

                entity.Property(e => e.Duracion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("carmduraci");

                entity.Property(e => e.Medicamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carmmedica");

                entity.HasOne(d => d.CodigoCitaNavigation)
                    .WithMany(p => p.RecetaMedicas)
                    .HasForeignKey(d => d.CodigoCita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recetamedica_Cita");
            });

            modelBuilder.Entity<Resultado>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Resultado");

                entity.ToTable("aresado");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("paruidresu");

                entity.Property(e => e.Antecedentes)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caruantece");

                entity.Property(e => e.CodigoCita)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("faruidcita");

                entity.Property(e => e.Estado).HasColumnName("caruestado");

                entity.Property(e => e.Fecha)
                    .HasColumnType("date")
                    .HasColumnName("carufecres");

                entity.Property(e => e.Motivo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carumotcon");

                entity.Property(e => e.ProximaCita)
                    .HasColumnType("date")
                    .HasColumnName("caruprocit");

                entity.Property(e => e.TiempoEnfermedad)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("carutieenf");

                entity.Property(e => e.Tratamiento)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("carutratam");

                entity.HasOne(d => d.CodigoCitaNavigation)
                    .WithMany(p => p.Resultados)
                    .HasForeignKey(d => d.CodigoCita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resultado_Cita");
            });

            modelBuilder.Entity<TipoUsuario>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Tipousuario");

                entity.ToTable("atipusu");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("patuidtius");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("catucarusu");
            });

            modelBuilder.Entity<Triaje>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("Triaje");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("pataidtria");

                entity.Property(e => e.CodigoCita)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("fataidcita");

                entity.Property(e => e.FrecuenciaCardiaca)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("catafrecar");

                entity.Property(e => e.FrecuenciaRespiratoria)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("catafreres");

                entity.Property(e => e.Ocupacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cataocupac");

                entity.Property(e => e.Peso).HasColumnName("catapesoso");

                entity.Property(e => e.PresionArterial)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("catapreart");

                entity.Property(e => e.Saturacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("catasatura");

                entity.Property(e => e.Temperatura)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Catatemper");

                entity.HasOne(d => d.CodigoCitaNavigation)
                    .WithMany(p => p.Triajes)
                    .HasForeignKey(d => d.CodigoCita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Triaje_Cita");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Usuario");

                entity.ToTable("ausurio");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("pauaidusua");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cauacargoo");

                entity.Property(e => e.Contrasena)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cauacontra");

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cauacorele");

                entity.Property(e => e.Especialidad)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cauaespeci");

                entity.Property(e => e.TipoUsuario)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("fauaidtuso");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Usuario)
                    .HasForeignKey<Usuario>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Persona");

                entity.HasOne(d => d.TipoUsuarioNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.TipoUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Tipousuario");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}