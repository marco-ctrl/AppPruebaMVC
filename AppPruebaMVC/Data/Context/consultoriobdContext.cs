// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using AppPruebaMVC.Data.Models;

namespace AppPruebaMVC.Data.Context
{
    public partial class consultoriobdContext : DbContext
    {
        public consultoriobdContext()
        {
        }

        public consultoriobdContext(DbContextOptions<consultoriobdContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admicion> Admicions { get; set; }
        public virtual DbSet<Administrativo> Administrativos { get; set; }
        public virtual DbSet<CitaMedica> CitaMedicas { get; set; }
        public virtual DbSet<Diagnostico> Diagnosticos { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Enfermedad> Enfermedads { get; set; }
        public virtual DbSet<Enfermera> Enfermeras { get; set; }
        public virtual DbSet<Medicamento> Medicamentos { get; set; }
        public virtual DbSet<Paciente> Pacientes { get; set; }
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<RecetaMedica> RecetaMedicas { get; set; }
        public virtual DbSet<Resultado> Resultados { get; set; }
        public virtual DbSet<RolUsuario> RolUsuarios { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Usuario> Usuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Admicion>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Admicion");

                entity.ToTable("aadmici");

                entity.Property(e => e.Codigo).HasColumnName("paadcodadm");

                entity.Property(e => e.CodCita).HasColumnName("faadcodcit");

                entity.Property(e => e.CodEnfermera).HasColumnName("faadcodenf");

                entity.Property(e => e.FechaAdmicion)
                    .HasColumnType("date")
                    .HasColumnName("caadfecadm");

                entity.Property(e => e.FrecuenciaCardiaca).HasColumnName("caadfrecar");

                entity.Property(e => e.FrecuenciaRespiratoria).HasColumnName("caadfreres");

                entity.Property(e => e.Ocupacion)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caadocupac");

                entity.Property(e => e.Peso).HasColumnName("caadpespac");

                entity.Property(e => e.PresionArterial).HasColumnName("caadpreart");

                entity.Property(e => e.Saturacion).HasColumnName("caadsatura");

                entity.Property(e => e.Temperatura).HasColumnName("caadtemper");

                entity.HasOne(d => d.CodCitaNavigation)
                    .WithMany(p => p.Admicions)
                    .HasForeignKey(d => d.CodCita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_aadmici_acitmed");

                entity.HasOne(d => d.CodEnfermeraNavigation)
                    .WithMany(p => p.Admicions)
                    .HasForeignKey(d => d.CodEnfermera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Admicion_Enfermera");
            });

            modelBuilder.Entity<Administrativo>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Administrativo");

                entity.ToTable("aadmini");

                entity.Property(e => e.Codigo)
                    .ValueGeneratedNever()
                    .HasColumnName("paadcodadm");

                entity.Property(e => e.Cargo)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("caadcargoo");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Administrativo)
                    .HasForeignKey<Administrativo>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Administrativo_Persona");
            });

            modelBuilder.Entity<CitaMedica>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Cita");

                entity.ToTable("acitmed");

                entity.Property(e => e.Codigo).HasColumnName("pacicodcit");

                entity.Property(e => e.CodDoctor).HasColumnName("facicoddoc");

                entity.Property(e => e.CodPaciente).HasColumnName("facicodpac");

                entity.Property(e => e.CodUsuario).HasColumnName("facicodusu");

                entity.Property(e => e.Estado).HasColumnName("caciestcit");

                entity.Property(e => e.FechaHora)
                    .HasColumnType("datetime")
                    .HasColumnName("cacifechor");

                entity.HasOne(d => d.CodDoctorNavigation)
                    .WithMany(p => p.CitaMedicas)
                    .HasForeignKey(d => d.CodDoctor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cita_Doctor");

                entity.HasOne(d => d.CodPacienteNavigation)
                    .WithMany(p => p.CitaMedicas)
                    .HasForeignKey(d => d.CodPaciente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acitmed_apacient");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.CitaMedicas)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cita_Usuario");
            });

            modelBuilder.Entity<Diagnostico>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Diagnostico");

                entity.ToTable("adiagno");

                entity.Property(e => e.Codigo).HasColumnName("padgcoddia");

                entity.Property(e => e.CodEnfermedad).HasColumnName("fadgcodenf");

                entity.Property(e => e.CodResultado).HasColumnName("fadgcodres");

                entity.Property(e => e.TipoDiagnostico)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cadgtipdia");

                entity.HasOne(d => d.CodEnfermedadNavigation)
                    .WithMany(p => p.Diagnosticos)
                    .HasForeignKey(d => d.CodEnfermedad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Diagnostico_Enfermedad");

                entity.HasOne(d => d.CodResultadoNavigation)
                    .WithMany(p => p.Diagnosticos)
                    .HasForeignKey(d => d.CodResultado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Diagnostico_Resultado");
            });

            modelBuilder.Entity<Doctor>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Doctor");

                entity.ToTable("adoctor");

                entity.Property(e => e.Codigo)
                    .ValueGeneratedNever()
                    .HasColumnName("padccoddoc");

                entity.Property(e => e.Especialidad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cadcespdoc");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Doctor)
                    .HasForeignKey<Doctor>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Doctor_Persona");
            });

            modelBuilder.Entity<Enfermedad>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Enfermedad");

                entity.ToTable("aenfmed");

                entity.Property(e => e.Codigo).HasColumnName("paefcodenf");

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("caefdesenf");

                entity.Property(e => e.Estado).HasColumnName("caefestenf");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caefnomenf");
            });

            modelBuilder.Entity<Enfermera>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Enfermera");

                entity.ToTable("aenferm");

                entity.Property(e => e.Codigo)
                    .ValueGeneratedNever()
                    .HasColumnName("paefcodenf");

                entity.Property(e => e.Especialidad)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("caefespenf");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Enfermera)
                    .HasForeignKey<Enfermera>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Enfermera_Persona");
            });

            modelBuilder.Entity<Medicamento>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Medicamento");

                entity.ToTable("amedica");

                entity.Property(e => e.Codigo).HasColumnName("pamdcodmed");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("camddesmed");

                entity.Property(e => e.Estado).HasColumnName("camdestmed");

                entity.Property(e => e.NombreMedicamento)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("camdnommed");
            });

            modelBuilder.Entity<Paciente>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Paciente");

                entity.ToTable("apacient");

                entity.Property(e => e.Codigo)
                    .ValueGeneratedNever()
                    .HasColumnName("papccodpac");

                entity.Property(e => e.Alergia)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("capcalergia");

                entity.Property(e => e.PersonaEncargada)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capcperenc");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithOne(p => p.Paciente)
                    .HasForeignKey<Paciente>(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Paciente_Persona");
            });

            modelBuilder.Entity<Persona>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Persona");

                entity.ToTable("aperson");

                entity.Property(e => e.Codigo).HasColumnName("papscodper");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("capsapemat");

                entity.Property(e => e.ApellidoPaterno)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("capsapepat");

                entity.Property(e => e.Cedula)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("capscedul");

                entity.Property(e => e.Direccion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsdirper");

                entity.Property(e => e.Estado).HasColumnName("capsestper");

                entity.Property(e => e.EstadoCivil)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("capsestciv");

                entity.Property(e => e.FechaNacimiento)
                    .HasColumnType("date")
                    .HasColumnName("capsfecnac");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("capsnomper");

                entity.Property(e => e.NumeroCelular)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("capscelper");

                entity.Property(e => e.NumeroTelefono)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("capstelper");

                entity.Property(e => e.Sexo).HasColumnName("capssexper");
            });

            modelBuilder.Entity<RecetaMedica>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Recetamedica");

                entity.ToTable("arecmed");

                entity.Property(e => e.Codigo).HasColumnName("parmcodrec");

                entity.Property(e => e.Cantidad).HasColumnName("carmcantid");

                entity.Property(e => e.CodMedicamento).HasColumnName("farmcodmed");

                entity.Property(e => e.Dosis).HasColumnName("carmdosism");

                entity.Property(e => e.Duracion).HasColumnName("carmduraci");

                entity.HasOne(d => d.CodMedicamentoNavigation)
                    .WithMany(p => p.RecetaMedicas)
                    .HasForeignKey(d => d.CodMedicamento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Recetamedica_Medicamento");
            });

            modelBuilder.Entity<Resultado>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Resultado");

                entity.ToTable("aresult");

                entity.Property(e => e.Codigo).HasColumnName("parscodres");

                entity.Property(e => e.Antecedentes)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carsantece");

                entity.Property(e => e.CodCita).HasColumnName("farscodcit");

                entity.Property(e => e.Codtratamiento).HasColumnName("farscodtra");

                entity.Property(e => e.Estado).HasColumnName("carsestres");

                entity.Property(e => e.FechaResultado)
                    .HasColumnType("date")
                    .HasColumnName("carsfecres");

                entity.Property(e => e.MotivoConsulta)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carsmotcon");

                entity.Property(e => e.ProximaCita)
                    .HasColumnType("date")
                    .HasColumnName("carsprocit");

                entity.Property(e => e.TiempoEnfermedad)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carstieenf");

                entity.HasOne(d => d.CodCitaNavigation)
                    .WithMany(p => p.Resultados)
                    .HasForeignKey(d => d.CodCita)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resultado_Cita");

                entity.HasOne(d => d.CodtratamientoNavigation)
                    .WithMany(p => p.Resultados)
                    .HasForeignKey(d => d.Codtratamiento)
                    .HasConstraintName("FK_aresult_arecmed");
            });

            modelBuilder.Entity<RolUsuario>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Userrol");

                entity.ToTable("ausurol");

                entity.Property(e => e.Codigo).HasColumnName("paurcoduro");

                entity.Property(e => e.CodRol).HasColumnName("faurcodrou");

                entity.Property(e => e.CodUsuario).HasColumnName("faurcodusu");

                entity.HasOne(d => d.CodRolNavigation)
                    .WithMany(p => p.RolUsuarios)
                    .HasForeignKey(d => d.CodRol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Userrol_Rol");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.RolUsuarios)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Userrol_Usuario");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Rol");

                entity.ToTable("aroluse");

                entity.Property(e => e.Codigo).HasColumnName("paruconrol");

                entity.Property(e => e.Rol)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("carunomrol");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_Usuario");

                entity.ToTable("ausuari");

                entity.Property(e => e.Codigo).HasColumnName("pauscodusu");

                entity.Property(e => e.CodPersona).HasColumnName("fauscodper");

                entity.Property(e => e.Contrasena)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("causcontra");

                entity.Property(e => e.Correo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("causcorele");

                entity.Property(e => e.Estado).HasColumnName("causestusu");

                entity.Property(e => e.Usuario1)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("caususuari");

                entity.HasOne(d => d.CodPersonaNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.CodPersona)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuario_Persona");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}